"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/getDocumentationStructure";
exports.ids = ["pages/api/getDocumentationStructure"];
exports.modules = {

/***/ "(api)/./pages/api/getDocumentationStructure.js":
/*!************************************************!*\
  !*** ./pages/api/getDocumentationStructure.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var _public_documentation_json__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../public/documentation.json */ \"(api)/./public/documentation.json\");\n// import fs from \"fs\";\n// import path from \"path\";\n// export default function handler(req, res) {\n//   const { dir } = req.query; // Get the directory from the query string\n//   // Default to the 'Welcome-to-Grid' directory if no directory is provided\n//   const articleDirPath = path.join(\n//     process.cwd(),\n//     \"pages\",\n//     dir || \"/Documentation/Welcome-to-Grid\" // Use the provided directory or fallback\n//   );\n//   // Function to read all directories and articles, tracking the relative path\n//   const getStructure = (dir, currentPath = \"\") => {\n//     const items = fs.readdirSync(dir, { withFileTypes: true });\n//     return items\n//       .map((item) => {\n//         const itemPath = path.join(dir, item.name);\n//         const relativePath = path.join(\n//           currentPath,\n//           item.name.replace(\".js\", \"\")\n//         ); // Remove .js from the path\n//         // If it's a directory, recursively read its contents\n//         if (item.isDirectory()) {\n//           return {\n//             type: \"directory\",\n//             name: item.name,\n//             path: relativePath, // Save the current directory path\n//             children: getStructure(itemPath, relativePath),\n//           };\n//         }\n//         // If it's a file (and ends with .js), treat it as an article\n//         if (\n//           item.isFile() &&\n//           item.name.endsWith(\".js\") &&\n//           item.name !== \"index.js\"\n//         ) {\n//           return {\n//             type: \"file\",\n//             name: item.name.replace(\".js\", \"\"), // Remove .js from the name\n//             path: relativePath, // Use the path without .js\n//           };\n//         }\n//       })\n//       .filter(Boolean); // Filter out any undefined entries\n//   };\n//   // Ensure the directory exists before proceeding\n//   if (!fs.existsSync(articleDirPath)) {\n//     return res.status(404).json({ error: \"Directory not found\" });\n//   }\n//   // Fetch structure for directories under the specified path\n//   const documentationStructure = getStructure(articleDirPath);\n//   res.status(200).json(documentationStructure);\n// }\n// pages/api/documentation.js\n\nfunction handler(req, res) {\n    const { dir  } = req.query;\n    // Use the provided directory or default to '/Documentation/Welcome-to-Grid'\n    const targetDir = dir || \"/Documentation/Welcome-to-Grid\";\n    // Recursively search for the node that matches the target path.\n    function findNode(nodes, targetPath) {\n        for (const node of nodes){\n            if (node.path === targetPath) {\n                return node;\n            }\n            if (node.children) {\n                const found = findNode(node.children, targetPath);\n                if (found) return found;\n            }\n        }\n        return null;\n    }\n    // Given a node and its parent's path, strip the parent's path prefix\n    // from the node's full path, and do so recursively for any children.\n    function stripBasePath(node, basePath) {\n        let relativePath = node.path;\n        if (relativePath.startsWith(basePath)) {\n            // Remove the basePath part from the full path.\n            relativePath = relativePath.slice(basePath.length);\n        }\n        // Remove any leading slash to get a clean relative path.\n        if (relativePath.startsWith(\"/\")) {\n            relativePath = relativePath.slice(1);\n        }\n        // Create a new node with the relative path.\n        const newNode = {\n            ...node,\n            path: relativePath\n        };\n        if (node.children) {\n            newNode.children = node.children.map((child)=>stripBasePath(child, basePath));\n        }\n        return newNode;\n    }\n    // Find the node corresponding to the requested directory.\n    const foundNode = findNode(_public_documentation_json__WEBPACK_IMPORTED_MODULE_0__, targetDir);\n    if (!foundNode) {\n        return res.status(404).json({\n            error: \"Directory not found\"\n        });\n    }\n    if (foundNode.type === \"directory\") {\n        // For directories, map over the children and strip the base path.\n        const children = (foundNode.children || []).map((child)=>stripBasePath(child, foundNode.path));\n        return res.status(200).json(children);\n    } else {\n        // For a file, you might also want to adjust the path if needed.\n        const relativeFile = stripBasePath(foundNode, targetDir);\n        return res.status(200).json(relativeFile);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./pages/api/getDocumentationStructure.js\n");

/***/ }),

/***/ "(api)/./public/documentation.json":
/*!***********************************!*\
  !*** ./public/documentation.json ***!
  \***********************************/
/***/ ((module) => {

module.exports = JSON.parse('[{"type":"directory","name":"Welcome-to-Grid","path":"/Documentation/Welcome-to-Grid","children":[{"type":"directory","name":"How-we-Say-Welcome","path":"/Documentation/Welcome-to-Grid/How-we-Say-Welcome","children":[{"type":"file","name":"Hi-Yall","path":"/Documentation/Welcome-to-Grid/How-we-Say-Welcome/Hi-Yall"}]}]}]');

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = (__webpack_exec__("(api)/./pages/api/getDocumentationStructure.js"));
module.exports = __webpack_exports__;

})();